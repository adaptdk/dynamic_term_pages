<?php
/**
 * Implements hook_ctools_plugin_directory
 */
function dynamic_term_pages_ctools_plugin_directory($module, $plugin) {
  // we'll be nice and limit scandir() calls
  if (in_array($module, array('ctools', 'page_manager'))) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function dynamic_term_pages_taxonomy_term_insert($term) {
  dynamic_term_pages_pathauto_name_save($term);
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function dynamic_term_pages_taxonomy_term_update($term) {
  dynamic_term_pages_pathauto_name_save($term);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function dynamic_term_pages_taxonomy_term_delete($term) {
  db_delete('dynamic_term_pathauto_name')->condition('tid', $term->tid)->execute();
}

/**
 * Save the pathauto cleaned term name so that we can use it to find our term id
 * Only save a cleaned name if pathauto is actually enabled.
 *
 * @param object $term
 *   The taxonomy term
 */
function dynamic_term_pages_pathauto_name_save($term) {
  // First check if the alias already exists for some other term. If yes, create
  // a new alias.
  if (dynamic_term_pages_name_exists($term)) {
    dynamic_term_pages_name_uniquify($term);
  }

  // We use tid as a unique key, so do a on duplicate key update
  db_merge('dynamic_term_pathauto_name')
    ->key(array('tid' => $term->tid))
    ->fields(array(
      'tid' => $term->tid,
      'pathauto_name' => dynamic_term_pages_cleanstring($term->name)
    ))->execute();
}

/**
 * Implements hook_taxonomy_term_load().
 */
function dynamic_term_pages_taxonomy_term_load($terms) {
  $result = db_select('dynamic_term_pathauto_name', 'dtp')->fields('dtp', array('tid', 'pathauto_name'))->condition('dtp.tid', array_keys($terms), 'IN')
    ->execute();
  foreach ($result as $record) {
    $terms[$record->tid]->pathauto_name = $record->pathauto_name;
  }
}

/**
 * Lookup pathauto term name in database
 * @param $name
 *  Dynamic alias. Term name run through dynamic_term_pages_cleanstring()
 *
 * @return $tid
 */
function dynamic_term_pages_pathauto_name_load($name) {
  $result = db_select('dynamic_term_pathauto_name', 'dtp')
    ->fields('dtp')
    ->condition('pathauto_name', $name)
    ->execute()
    ->fetchAssoc();

  if ($result) {
    return $result['tid'];
  }

  return FALSE;
}

/**
 * Check if a dynamic alias already exists for a different term.
 *
 * @param object $term
 *   Term object
 *
 * @return
 *   TRUE if an alias exists, FALSE if not.
 */
function dynamic_term_pages_name_exists($term) {
  $result = db_select('dynamic_term_pathauto_name', 'dtp')
    ->fields('dtp', array('tid'))
    ->condition('pathauto_name', dynamic_term_pages_cleanstring($term->name), '=')
    ->condition('tid', $term->tid, '!=')
    ->range(0, 1)
    ->execute()
    ->fetchField();

  return !empty($result);
}

/**
 * Create a unique alias.
 *
 * @param $term
 *   Taxonomy term object.
 */
function dynamic_term_pages_name_uniquify(&$term) {
  if (!dynamic_term_pages_name_exists($term)) {
    return;
  }

  $i = 0;
  do {
    $term->name = dynamic_term_pages_cleanstring($term->name) . '-' . $i;
    $i++;
  } while (dynamic_term_pages_name_exists($term));
}

/**
 * Create a clean alias out of a term name.
 */
function dynamic_term_pages_cleanstring($string) {
  include_once(drupal_get_path('module', 'pathauto') . '/pathauto.inc');

  return pathauto_cleanstring(check_plain($string));
}

/**
 * Implements hook_url_inbound_alter
 */
function dynamic_term_pages_url_inbound_alter(&$path, $original_path, $path_language) {
  if (variable_get('dynamic_term_pages_view_disabled', TRUE)) {
    return;
  }
  // Check if there are redirects.
  if (module_exists('redirect')) {
    $current_langcode = !empty($path_language) ? $path_language : $GLOBALS['language']->language;
    $current_query = drupal_get_query_parameters();
    if (redirect_load_by_source($original_path, $current_langcode, $current_query)) {
      return;
    }
  }

  $override = FALSE;

  // Check if path already exists, if it doesn't, check for a term in first level and redirect to our panel
  $exists = drupal_lookup_path('source', $original_path);

  // Only give access to urls with no alias that are not admin page, or if taxonomy term page override is enabled to taxonomy pages that are not edit pages
  $parts = explode('/', $path);
  $o_parts = explode('/', $original_path);

  if (!$exists && $parts[0] != 'admin') {
    if (dynamic_term_pages_term_load($o_parts[0])) {
      $override = TRUE;
    }
  }
  elseif (variable_get('dynamic_term_pages_override_taxonomy_term_page', FALSE) && $parts[0] == 'taxonomy' && !isset($parts[3])) {
    if ($term = dynamic_term_pages_term_load($o_parts[0])) {
      // Check if term is a in enabled taxonomies for dynamic term pages
      $enabled = variable_get('dynamic_term_pages_enabled_vocabularies', array());
      if (in_array($term->vocabulary_machine_name, array_keys($enabled))) {
        $override = TRUE;
      }
    }
  }

  if ($override) {
    $path = 'dtp/' . $original_path;
  }
}

/**
 * Custom wildcard menu loader
 * @param $term_name
 * @return object|bool
 */
function dynamic_term_pages_term_load($term_name) {
  // Look for argument in saved clean data
  $tid = dynamic_term_pages_pathauto_name_load($term_name);

  if ($tid) {
    // Then try and load the term
    $term = taxonomy_term_load($tid);

    if (!empty($term)) {
      return $term;
    }
  }

  // Fallback, look up term by name
  $term = taxonomy_get_term_by_name($term_name);

  if ($term) {
    // taxonomy_get_term_by_name returns an array keyed by tid
    $term = reset($term);

    return $term;
  }

  return FALSE;
}
